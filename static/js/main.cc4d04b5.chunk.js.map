{"version":3,"sources":["store/action/actionsTypes.js","store/action/index.js","components/Btn.js","contaners/LocationBtn.js","components/BtnWrapper.js","components/Loading.js","components/WeatherCard.js","contaners/WeatherWrapper.js","App.js","reportWebVitals.js","store/reducers/index.js","store/configureStore.js","index.js"],"names":["REQUEST","RECEIVE","SELECT_LOCATION","handleGetData","data","weather","time","parameter","parameterName","pop","minT","maxT","apiGetWeather","location","dispatch","type","requestDate","Axios","get","params","Authorization","locationName","then","res","setTimeout","getData","weatherElement","receiveGet","records","catch","err","console","log","Btn","className","onClick","disable","disabled","LocationBtn","connect","state","ownProps","selectLocation","getState","getLocationWeather","BtnWrapper","Loading","WeatherCard","isLoading","WeatherWrapper","getWeather","items","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","action","isAlreadyGet","weatherReducer","combineReducers","itemStore","createStore","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"wQAAaA,EAAU,UACVC,EAAU,UACVC,EAAkB,kBCezBC,EAAgB,SAACC,GACrB,MAAO,CACLC,QAASD,EAAK,GAAGE,KAAK,GAAGC,UAAUC,cACnCC,IAAKL,EAAK,GAAGE,KAAK,GAAGC,UAAUC,cAC/BE,KAAMN,EAAK,GAAGE,KAAK,GAAGC,UAAUC,cAChCG,KAAMP,EAAK,GAAGE,KAAK,GAAGC,UAAUC,gBAc9BI,EAAgB,SAAAC,GAAQ,OAAI,SAAAC,GAEhC,OADAA,EA3ByB,SAACD,GAC1B,MAAO,CACLE,KAAMf,EACNa,YAwBOG,CAAYH,IACdI,IAAMC,IAJH,gEAIY,CACpBC,OAAQ,CACNC,cAAe,2CACfC,aAAcR,KAGjBS,MAAK,SAAAC,GACJC,YAAW,kBAAIV,EAnBO,SAACD,EAAUT,GACnC,MAAO,CACLW,KAAMd,EACNY,WACAY,QAAStB,EAAcC,EAAKsB,iBAeJC,CAAWd,EAAUU,EAAInB,KAAKwB,QAAQf,SAAS,OAAM,QAE9EgB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QCrCbG,EARH,SAAC,GAAiD,IAAhDC,EAA+C,EAA/CA,UAAWb,EAAoC,EAApCA,aAAcc,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,QAC5C,OACI,mCACI,wBAAQF,UAAWA,EAAWnB,KAAK,SAASoB,QAASA,EAASE,SAAUD,EAAxE,SAAkFf,OCkB/EiB,EAFKC,aAfI,SAACC,EAAOC,GAC5B,MAAO,CACHL,QAASI,EAAME,iBAAmBD,EAASpB,iBAIxB,SAACP,EAAU2B,GAClC,MAAO,CACHN,QAAS,WFXa,IAACtB,EEYnBC,GFZmBD,EEYK4B,EAASpB,aFXpC,CACLN,KAAMb,EACNW,cEUQC,EFwCsB,SAAAD,GAAQ,OAAI,SAACC,EAAU6B,GAErD,OAAO7B,EAASF,EAAcC,KE1Cb+B,CAAmBH,EAASpB,mBAK7BkB,CAA6CN,GCNlDY,G,MAVI,WACf,OACI,sBAAKX,UAAU,gBAAf,UACI,cAAC,EAAD,CAAaA,UAAU,MAAMb,aAAa,uBAC1C,cAAC,EAAD,CAAaa,UAAU,MAAMb,aAAa,uBAC1C,cAAC,EAAD,CAAaa,UAAU,MAAMb,aAAa,4BCNvCyB,G,MAFC,kBAAM,qBAAKZ,UAAU,aCgBtBa,EAdK,SAAC,GAAqC,IAApC1B,EAAmC,EAAnCA,aAAcjB,EAAqB,EAArBA,KAChC,OAAiB,IADoC,EAAf4C,UACR,cAAC,EAAD,IAC1B5C,EAAKC,QAEL,gCACI,4BAAIgB,IACJ,+CAAQjB,EAAKC,WACb,qDAASD,EAAKO,KAAd,YACA,qDAASP,EAAKM,KAAd,YACA,2DAAUN,EAAKK,IAAf,UAPiB,kECgBdwC,EAFQV,aAVC,SAACC,GAErB,MAAO,CACHnB,aAAcmB,EAAME,eACpBtC,MATSS,EASK2B,EAAME,eATDtC,EASiBoC,EAAMU,WAR1C9C,EAAKS,GACFT,EAAKS,GAAUsC,MADK,IASvBH,UAAWR,EAAMU,WAAWV,EAAME,gBAAkBF,EAAMU,WAAWV,EAAME,gBAAgBM,UAAY,IAV/F,IAACnC,EAAUT,IAeJmC,CAAyBQ,GCLjCK,MAVf,WAEE,OACE,sBAAKlB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCESmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjC,MAAK,YAAkD,IAA/CkC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,6BCWRjD,EAAU,SAACmC,EAAOqB,GACpB,OAAOA,EAAO9C,MACV,KAAKf,EACD,OAAO,2BACAwC,GADP,IAEIQ,WAAW,EACXc,cAAc,EACdX,MAAO,KAEf,KAAKlD,EACD,OAAO,2BACAuC,GADP,IAEIQ,WAAW,EACXc,cAAc,EACdX,MAAOU,EAAOpC,UAEtB,QACI,OAAOe,IAsBJuB,EALQC,YAAgB,CACnCtB,eAlDmB,WAA0B,IAAzBF,EAAwB,uDAAlB,qBAAOqB,EAAW,uCAC5C,OAAOA,EAAO9C,MACV,KAAKb,EACD,OAAO2D,EAAOhD,SAClB,QACI,OAAO2B,IA8CfU,WAfe,WAAuB,IAAtBV,EAAqB,uDAAf,GAAIqB,EAAW,uCACrC,OAAOA,EAAO9C,MACV,KAAKf,EACL,KAAKC,EACD,OAAO,2BACAuC,GADP,kBAEKqB,EAAOhD,SAAWR,EAAQmC,EAAMqB,EAAOhD,UAAWgD,KAE3D,QACI,OAAOrB,MCvCJyB,EAFGC,YAAYH,EAAgBI,YAAgBC,MCM9DC,IAASC,OACP,cAAC,IAAD,CAAUC,MAAON,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,SAM1BpB,M","file":"static/js/main.cc4d04b5.chunk.js","sourcesContent":["export const REQUEST = \"REQUEST\";\r\nexport const RECEIVE = \"RECEIVE\";\r\nexport const SELECT_LOCATION = \"SELECT_LOCATION\";","import Axios from 'axios'\r\nimport  { REQUEST, RECEIVE, SELECT_LOCATION} from './actionsTypes'\r\n\r\nexport const selectLocation = (location) =>{\r\n  return {\r\n    type: SELECT_LOCATION,\r\n    location\r\n  }\r\n}\r\n\r\nexport const requestDate = (location) => {\r\n  return {\r\n    type: REQUEST,\r\n    location\r\n  }\r\n}\r\n\r\nconst handleGetData = (data) => {\r\n  return {\r\n    weather: data[0].time[0].parameter.parameterName,\r\n    pop: data[1].time[0].parameter.parameterName,\r\n    minT: data[2].time[0].parameter.parameterName,\r\n    maxT: data[4].time[0].parameter.parameterName,\r\n  }\r\n}\r\n\r\nexport const receiveGet = (location, data) => {\r\n  return {\r\n    type: RECEIVE,\r\n    location,\r\n    getData: handleGetData(data.weatherElement)\r\n  }\r\n}\r\n\r\nconst api = 'https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001';\r\n\r\nconst apiGetWeather = location => dispatch => {\r\n  dispatch(requestDate(location));\r\n  return Axios.get(api, {\r\n    params: {\r\n      Authorization: 'CWB-62F6CBF3-5E6A-455D-9B90-2CA5F2B22A9D',\r\n      locationName: location\r\n    }\r\n  })\r\n  .then(res => {\r\n    setTimeout(()=>dispatch(receiveGet(location, res.data.records.location[0])), 1000);\r\n  })\r\n  .catch(err => console.log(err));\r\n}\r\n\r\nconst isDataExist = (state, location) => {\r\n  const data = state.getWeather[location];\r\n  if(!data) return true;\r\n  else return false\r\n}\r\n\r\nexport const getLocationWeather = location => (dispatch, getState) => {\r\n  // if(isDataExist(getState(), location)) {\r\n    return dispatch(apiGetWeather(location));\r\n  // }\r\n}\r\n","import React from 'react'\r\n\r\nconst Btn = ({className, locationName, onClick, disable}) => {\r\n    return (\r\n        <>\r\n            <button className={className} type=\"button\" onClick={onClick} disabled={disable}>{locationName}</button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Btn;","import { connect } from 'react-redux';\r\nimport { selectLocation, getLocationWeather } from '../store/action'\r\n\r\n// component\r\nimport Btn from '../components/Btn';\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        disable: state.selectLocation === ownProps.locationName\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        onClick: ()=>{\r\n            dispatch(selectLocation(ownProps.locationName));\r\n            dispatch(getLocationWeather(ownProps.locationName));\r\n        }\r\n    }\r\n}\r\n\r\nconst LocationBtn = connect(mapStateToProps, mapDispatchToProps)(Btn);\r\n\r\nexport default LocationBtn","import React from 'react';\r\nimport LocationBtn from '../contaners/LocationBtn';\r\n\r\nimport '../assets/btnWrapper.css'\r\n\r\nconst BtnWrapper = () => {\r\n    return (\r\n        <div className=\"loactionBlock\">\r\n            <LocationBtn className=\"btn\" locationName='臺北市' />\r\n            <LocationBtn className=\"btn\" locationName='新北市' />\r\n            <LocationBtn className=\"btn\" locationName='臺中市' />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default BtnWrapper;\r\n\r\n","import '../assets/loading.css'\r\n\r\nconst Loading = () => <div className=\"loader\"></div>\r\n\r\nexport default Loading;","import React from 'react'\r\n\r\nimport Loading from './Loading';\r\n\r\nconst WeatherCard = ({locationName, data, isLoading}) => {\r\n    if(isLoading === true) return <Loading />\r\n    if(!data.weather) return <div>請點選地區</div>\r\n    return (\r\n        <div>\r\n            <p>{locationName}</p>\r\n            <p>天氣: {data.weather}</p>\r\n            <p>最高溫: {data.maxT} &deg;C</p>\r\n            <p>最低溫: {data.minT} &deg;C</p>\r\n            <p>降雨機率: {data.pop}%</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","import { connect } from 'react-redux'\r\n\r\n// component\r\nimport WeatherCard from '../components/WeatherCard'\r\n\r\nconst calData = (location, data) => {\r\n    if(!data[location]) return {};\r\n    return data[location].items;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    // console.log(state);\r\n    return {\r\n        locationName: state.selectLocation,\r\n        data: calData(state.selectLocation, state.getWeather),\r\n        isLoading: state.getWeather[state.selectLocation] ? state.getWeather[state.selectLocation].isLoading : ''\r\n    }\r\n}\r\n\r\n\r\nconst WeatherWrapper = connect(mapStateToProps)(WeatherCard);\r\n\r\nexport default WeatherWrapper;","import React, { useState, useEffect} from 'react'\nimport './App.css';\nimport BtnWrapper from './components/BtnWrapper'\nimport WeatherWrapper from './contaners/WeatherWrapper'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <BtnWrapper />\n      <WeatherWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from 'redux'\r\nimport  { REQUEST, RECEIVE, SELECT_LOCATION} from '../action/actionsTypes'\r\n\r\nconst selectLocation = (state='台北市', action) => {\r\n    switch(action.type) {\r\n        case SELECT_LOCATION:\r\n            return action.location;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initObj = {\r\n    isLoading: false,\r\n    isAlreadyGet: false,\r\n    items: []\r\n}\r\n\r\nconst weather = (state, action) => {\r\n    switch(action.type) {\r\n        case REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isAlreadyGet: false,\r\n                items: {}\r\n            }\r\n        case RECEIVE:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isAlreadyGet: true,\r\n                items: action.getData\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getWeather = (state={}, action) => {\r\n    switch(action.type) {\r\n        case REQUEST:\r\n        case RECEIVE:\r\n            return {\r\n                ...state,\r\n                [action.location]: weather(state[action.location], action)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst weatherReducer = combineReducers({\r\n    selectLocation,\r\n    getWeather\r\n})\r\n\r\nexport default weatherReducer;","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\n// import createLogger from 'redux-logger'\r\nimport weatherReducer from './reducers'\r\n\r\n// const loggerMiddleware = createLogger()\r\n\r\nconst itemStore = createStore(weatherReducer, applyMiddleware(thunk));\r\n\r\nexport default itemStore;","// import 'babel-polyfill';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport itemStore from './store/configureStore';\n\n\n\nReactDOM.render(\n  <Provider store={itemStore}>\n    <App />\n  </Provider> ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}